#!/bin/bash							#!/bin/bash

mkdir -p uconsole-sleep/DEBIAN					mkdir -p uconsole-sleep/DEBIAN
mkdir -p uconsole-sleep/usr/local/bin				mkdir -p uconsole-sleep/usr/local/bin
mkdir -p uconsole-sleep/usr/local/src/uconsole-sleep		mkdir -p uconsole-sleep/usr/local/src/uconsole-sleep
mkdir -p uconsole-sleep/etc/uconsole-sleep			mkdir -p uconsole-sleep/etc/uconsole-sleep
mkdir -p uconsole-sleep/etc/systemd/system			mkdir -p uconsole-sleep/etc/systemd/system

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/RE	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/RE
Requirement: python3-full, venv(pip)				Requirement: python3-full, venv(pip)
1. Edit make.sh							1. Edit make.sh
2. chmod +x make.sh						2. chmod +x make.sh
3. Execute make.sh						3. Execute make.sh
EOF								EOF

cp $0 uconsole-sleep/usr/local/src/uconsole-sleep/make.sh	cp $0 uconsole-sleep/usr/local/src/uconsole-sleep/make.sh

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi
import os							import os


def find_backlight():						def find_backlight():
    return "/sys/class/backlight/backlight@0"		      |	    return "/sys/class/backlight/backlight"


if __name__ == "__main__":					if __name__ == "__main__":
    print(find_backlight())					    print(find_backlight())
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi
import os							import os

def find_drm_panel():						def find_drm_panel():
    DRM_PATH = "/sys/class/drm"					    DRM_PATH = "/sys/class/drm"

    for panel in os.listdir(DRM_PATH):				    for panel in os.listdir(DRM_PATH):
        panel_path = os.path.join(DRM_PATH, panel)		        panel_path = os.path.join(DRM_PATH, panel)

        if "DSI" in panel:				      |	        if "DPI" in panel:
            return panel_path					            return panel_path

    return ""							    return ""

if __name__ == "__main__":					if __name__ == "__main__":
    print(find_drm_panel())					    print(find_drm_panel())
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi
import os							import os

def find_power_key():						def find_power_key():
    EVENT_PATH = "/dev/input/by-path"				    EVENT_PATH = "/dev/input/by-path"

    for evt in os.listdir(EVENT_PATH):				    for evt in os.listdir(EVENT_PATH):
        pwr_evt_path = os.path.join(EVENT_PATH, evt)		        pwr_evt_path = os.path.join(EVENT_PATH, evt)

        if "axp221-pek" in evt:				      |	        if "pwr_button-event" in evt:
            return pwr_evt_path					            return pwr_evt_path

    return ""							    return ""

if __name__ == "__main__":					if __name__ == "__main__":
    print(find_power_key())					    print(find_power_key())
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi
import os							import os


def find_framebuffer():						def find_framebuffer():
    return "/sys/class/graphics/fb0"				    return "/sys/class/graphics/fb0"


if __name__ == "__main__":					if __name__ == "__main__":
    print(find_framebuffer())					    print(find_framebuffer())
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/fi
import os							import os


def find_internal_kb(ids=["feed:0000", "1eaf:0003"]):	      |	def find_internal_kb(ids=["feed:0000", "1eaf:0003", "4041:000
    usb_device_path = ""					    usb_device_path = ""

    for device in os.listdir("/sys/bus/usb/devices/"):		    for device in os.listdir("/sys/bus/usb/devices/"):
        device_path = os.path.join("/sys/bus/usb/devices", de	        device_path = os.path.join("/sys/bus/usb/devices", de
        vendor_path = os.path.join(device_path, "idVendor")	        vendor_path = os.path.join(device_path, "idVendor")
        product_path = os.path.join(device_path, "idProduct")	        product_path = os.path.join(device_path, "idProduct")

        if os.path.isfile(vendor_path) and os.path.isfile(pro	        if os.path.isfile(vendor_path) and os.path.isfile(pro
            with open(vendor_path, "r") as f:			            with open(vendor_path, "r") as f:
                vid = f.read().strip()				                vid = f.read().strip()

            with open(product_path, "r") as f:			            with open(product_path, "r") as f:
                pid = f.read().strip()				                pid = f.read().strip()

            if f"{vid}:{pid}" in ids:				            if f"{vid}:{pid}" in ids:
                usb_device_path = device_path			                usb_device_path = device_path
                break						                break

    return usb_device_path					    return usb_device_path


if __name__ == "__main__":					if __name__ == "__main__":
    print(find_internal_kb())					    print(find_internal_kb())
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/sl	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/sl
import os							import os
import uinput							import uinput
from find_drm_panel import find_drm_panel			from find_drm_panel import find_drm_panel
from find_framebuffer import find_framebuffer			from find_framebuffer import find_framebuffer
from find_backlight import find_backlight			from find_backlight import find_backlight


DISABLE_POWER_OFF_DRM = os.environ.get("DISABLE_POWER_OFF_DRM	DISABLE_POWER_OFF_DRM = os.environ.get("DISABLE_POWER_OFF_DRM

drm_panel_path = find_drm_panel()				drm_panel_path = find_drm_panel()
framebuffer_path = find_framebuffer()				framebuffer_path = find_framebuffer()
backlight_path = find_backlight()				backlight_path = find_backlight()

if not drm_panel_path:						if not drm_panel_path:
    raise Exception("there's no matched drm panel")		    raise Exception("there's no matched drm panel")

if not framebuffer_path:					if not framebuffer_path:
    raise Exception("there's no matched framebuffer")		    raise Exception("there's no matched framebuffer")

if not backlight_path:						if not backlight_path:
    raise Exception("there's no matched backlight")		    raise Exception("there's no matched backlight")

uinput_path = "/dev/uinput"					uinput_path = "/dev/uinput"
if not os.path.exists(uinput_path):				if not os.path.exists(uinput_path):
    raise FileNotFoundError(f"{file_path} 파일이 존재하지 않	    raise FileNotFoundError(f"{file_path} 파일이 존재하지 않

uinput_device = uinput.Device([uinput.KEY_SLEEP, uinput.KEY_W	uinput_device = uinput.Device([uinput.KEY_SLEEP, uinput.KEY_W

status_path = os.path.join(backlight_path, "bl_power")		status_path = os.path.join(backlight_path, "bl_power")

def toggle_display():						def toggle_display():
    global drm_panel_path					    global drm_panel_path
    global framebuffer_path					    global framebuffer_path
    global backlight_path					    global backlight_path
    global uinput_device					    global uinput_device
    global status_path						    global status_path

    try:							    try:
        with open(status_path, "r") as f:			        with open(status_path, "r") as f:
            screen_state = f.read().strip()			            screen_state = f.read().strip()

        if screen_state == "4":					        if screen_state == "4":
            #on							            #on
            with open(os.path.join(framebuffer_path, "blank")	            with open(os.path.join(framebuffer_path, "blank")
                f.write("0")					                f.write("0")
            with open(os.path.join(backlight_path, "bl_power"	            with open(os.path.join(backlight_path, "bl_power"
                f.write("0")					                f.write("0")
            if not DISABLE_POWER_OFF_DRM:			            if not DISABLE_POWER_OFF_DRM:
                with open(os.path.join(drm_panel_path, "statu	                with open(os.path.join(drm_panel_path, "statu
                    f.write("detect")				                    f.write("detect")
            uinput_device.emit_click(uinput.KEY_WAKEUP)		            uinput_device.emit_click(uinput.KEY_WAKEUP)
        else:							        else:
            #off						            #off
            if not DISABLE_POWER_OFF_DRM:			            if not DISABLE_POWER_OFF_DRM:
                with open(os.path.join(drm_panel_path, "statu	                with open(os.path.join(drm_panel_path, "statu
                    f.write("off")				                    f.write("off")
            with open(os.path.join(framebuffer_path, "blank")	            with open(os.path.join(framebuffer_path, "blank")
                f.write("1")					                f.write("1")
            with open(os.path.join(backlight_path, "bl_power"	            with open(os.path.join(backlight_path, "bl_power"
                f.write("4")					                f.write("4")

        print(f"panel status: {screen_state} to {'0' if scree	        print(f"panel status: {screen_state} to {'0' if scree

    except Exception as e:					    except Exception as e:
        print(f"error occured: {e}")				        print(f"error occured: {e}")


if __name__ == "__main__":					if __name__ == "__main__":
    toggle_display()						    toggle_display()
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/sl	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/sl
import struct							import struct
import os							import os
import fcntl							import fcntl
import select							import select
import uinput							import uinput
import threading						import threading
from time import time						from time import time

from find_power_key import find_power_key			from find_power_key import find_power_key
from sleep_display_control import toggle_display		from sleep_display_control import toggle_display


EVENT_DEVICE = find_power_key()					EVENT_DEVICE = find_power_key()
KEY_POWER = 116							KEY_POWER = 116
HOLD_TRIGGER_SEC = float(os.environ.get("HOLD_TRIGGER_SEC") o	HOLD_TRIGGER_SEC = float(os.environ.get("HOLD_TRIGGER_SEC") o


def timer_input_power_task(device):				def timer_input_power_task(device):
    device.emit(uinput.KEY_POWER, 1)				    device.emit(uinput.KEY_POWER, 1)
    device.emit(uinput.KEY_POWER, 0)				    device.emit(uinput.KEY_POWER, 0)


with open(EVENT_DEVICE, "rb") as f:				with open(EVENT_DEVICE, "rb") as f:
    fcntl.ioctl(f, 0x40044590, 1)				    fcntl.ioctl(f, 0x40044590, 1)

    epoll = select.epoll()					    epoll = select.epoll()
    epoll.register(f.fileno(), select.EPOLLIN)			    epoll.register(f.fileno(), select.EPOLLIN)

    uinput_device = uinput.Device([uinput.KEY_POWER])		    uinput_device = uinput.Device([uinput.KEY_POWER])

    try:							    try:
        last_key_down_timestamp = 0				        last_key_down_timestamp = 0
        input_power_timer = None				        input_power_timer = None

        while True:						        while True:
            events = epoll.poll()				            events = epoll.poll()
            current_time = time()				            current_time = time()
            for fileno, event in events:			            for fileno, event in events:
                if fileno == f.fileno():			                if fileno == f.fileno():
                    event_data = f.read(24)			                    event_data = f.read(24)
                    if not event_data:				                    if not event_data:
                        break					                        break

                    sec, usec, event_type, code, value = stru	                    sec, usec, event_type, code, value = stru

                    if event_type == 1 and code == KEY_POWER:	                    if event_type == 1 and code == KEY_POWER:
                        if value == 1:				                        if value == 1:
                            print(f"SRP: power key down input	                            print(f"SRP: power key down input
                            last_key_down_timestamp = current	                            last_key_down_timestamp = current
                            input_power_timer = threading.Tim	                            input_power_timer = threading.Tim
                            input_power_timer.start()		                            input_power_timer.start()
                        else:					                        else:
                            print(f"SRP: power key up input d	                            print(f"SRP: power key up input d
                            if input_power_timer != None and 	                            if input_power_timer != None and 
                                input_power_timer.cancel()	                                input_power_timer.cancel()
                                toggle_display()		                                toggle_display()

    finally:							    finally:
        epoll.unregister(f.fileno())				        epoll.unregister(f.fileno())
        epoll.close()						        epoll.close()
EOF								EOF

cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/sl	cat << 'EOF' > uconsole-sleep/usr/local/src/uconsole-sleep/sl
import os							import os
import time							import time
from inotify_simple import INotify, flags			from inotify_simple import INotify, flags
#from find_drm_panel import find_drm_panel			#from find_drm_panel import find_drm_panel
from find_backlight import find_backlight			from find_backlight import find_backlight
from find_internal_kb import find_internal_kb			from find_internal_kb import find_internal_kb

SAVING_CPU_FREQ = os.environ.get("SAVING_CPU_FREQ")		SAVING_CPU_FREQ = os.environ.get("SAVING_CPU_FREQ")
DISABLE_POWER_OFF_KB = os.environ.get("DISABLE_POWER_OFF_KB")	DISABLE_POWER_OFF_KB = os.environ.get("DISABLE_POWER_OFF_KB")
DISABLE_CPU_MIN_FREQ = os.environ.get("DISABLE_CPU_MIN_FREQ")	DISABLE_CPU_MIN_FREQ = os.environ.get("DISABLE_CPU_MIN_FREQ")

def control_by_state(state):					def control_by_state(state):
    global kb_device_path					    global kb_device_path
    global kb_device_id						    global kb_device_id
    global usb_driver_path					    global usb_driver_path
    global cpu_policy_path					    global cpu_policy_path

    if state:							    if state:
        if not DISABLE_CPU_MIN_FREQ:				        if not DISABLE_CPU_MIN_FREQ:
            with open(os.path.join(cpu_policy_path, "scaling_	            with open(os.path.join(cpu_policy_path, "scaling_
                f.write(default_cpu_freq_max)			                f.write(default_cpu_freq_max)
            print(f"cpu freq max: {default_cpu_freq_max}")	            print(f"cpu freq max: {default_cpu_freq_max}")
            with open(os.path.join(cpu_policy_path, "scaling_	            with open(os.path.join(cpu_policy_path, "scaling_
                f.write(default_cpu_freq_min)			                f.write(default_cpu_freq_min)
            print(f"cpu freq min: {default_cpu_freq_min}")	            print(f"cpu freq min: {default_cpu_freq_min}")
        if not DISABLE_POWER_OFF_KB:				        if not DISABLE_POWER_OFF_KB:
            with open(os.path.join(usb_driver_path, "bind"), 	            with open(os.path.join(usb_driver_path, "bind"), 
                f.write(kb_device_id)				                f.write(kb_device_id)
            print("kb power state: bind")			            print("kb power state: bind")
        with open(os.path.join(kb_device_path, "power/control	        with open(os.path.join(kb_device_path, "power/control
            f.write("on")					            f.write("on")
    else:							    else:
        with open(os.path.join(kb_device_path, "power/control	        with open(os.path.join(kb_device_path, "power/control
            f.write("auto")					            f.write("auto")
        if not DISABLE_POWER_OFF_KB:				        if not DISABLE_POWER_OFF_KB:
            with open(os.path.join(usb_driver_path, "unbind")	            with open(os.path.join(usb_driver_path, "unbind")
                f.write(kb_device_id)				                f.write(kb_device_id)
            print("kb power state: unbind")			            print("kb power state: unbind")
        if not DISABLE_CPU_MIN_FREQ:				        if not DISABLE_CPU_MIN_FREQ:
            with open(os.path.join(cpu_policy_path, "scaling_	            with open(os.path.join(cpu_policy_path, "scaling_
                f.write(saving_cpu_freq_min)			                f.write(saving_cpu_freq_min)
            print(f"cpu freq min: {saving_cpu_freq_min}")	            print(f"cpu freq min: {saving_cpu_freq_min}")
            with open(os.path.join(cpu_policy_path, "scaling_	            with open(os.path.join(cpu_policy_path, "scaling_
                f.write(saving_cpu_freq_max)			                f.write(saving_cpu_freq_max)
            print(f"cpu freq max: {saving_cpu_freq_max}")	            print(f"cpu freq max: {saving_cpu_freq_max}")


backlight_path = find_backlight()				backlight_path = find_backlight()
#drm_panel_path = find_drm_panel()				#drm_panel_path = find_drm_panel()
kb_device_path = find_internal_kb()				kb_device_path = find_internal_kb()
kb_device_id = os.path.basename(kb_device_path)			kb_device_id = os.path.basename(kb_device_path)
usb_driver_path = "/sys/bus/usb/drivers/usb"			usb_driver_path = "/sys/bus/usb/drivers/usb"
cpu_policy_path = "/sys/devices/system/cpu/cpufreq/policy0"	cpu_policy_path = "/sys/devices/system/cpu/cpufreq/policy0"

if not backlight_path:						if not backlight_path:
    raise Exception("there's no matched backlight")		    raise Exception("there's no matched backlight")

#if not drm_panel_path:						#if not drm_panel_path:
#    raise Exception("there's no matched drm panel")		#    raise Exception("there's no matched drm panel")

if not kb_device_path:						if not kb_device_path:
    raise Exception("there's no matched kb")			    raise Exception("there's no matched kb")

with open(os.path.join(kb_device_path, "power/autosuspend_del	with open(os.path.join(kb_device_path, "power/autosuspend_del
    f.write("0")						    f.write("0")
    print(f"{kb_device_path}/power/autosuspend_delay_ms = 0")	    print(f"{kb_device_path}/power/autosuspend_delay_ms = 0")

if not SAVING_CPU_FREQ:						if not SAVING_CPU_FREQ:
    with open(os.path.join(cpu_policy_path, "cpuinfo_min_freq	    with open(os.path.join(cpu_policy_path, "cpuinfo_min_freq
        saving_cpu_freq_min = f.read().strip()			        saving_cpu_freq_min = f.read().strip()
        saving_cpu_freq_max = saving_cpu_freq_min		        saving_cpu_freq_max = saving_cpu_freq_min
else:								else:
    saving_cpu_freq_min, saving_cpu_freq_max = SAVING_CPU_FRE	    saving_cpu_freq_min, saving_cpu_freq_max = SAVING_CPU_FRE
    saving_cpu_freq_min = f"{saving_cpu_freq_min}000"		    saving_cpu_freq_min = f"{saving_cpu_freq_min}000"
    saving_cpu_freq_max = f"{saving_cpu_freq_max}000"		    saving_cpu_freq_max = f"{saving_cpu_freq_max}000"
print(f"saving_cpu_freq_min: {saving_cpu_freq_min}")		print(f"saving_cpu_freq_min: {saving_cpu_freq_min}")
print(f"saving_cpu_freq_max: {saving_cpu_freq_max}")		print(f"saving_cpu_freq_max: {saving_cpu_freq_max}")

with open(os.path.join(cpu_policy_path, "scaling_min_freq"), 	with open(os.path.join(cpu_policy_path, "scaling_min_freq"), 
    default_cpu_freq_min = f.read().strip()			    default_cpu_freq_min = f.read().strip()
    print(f"default_cpu_freq_min: {default_cpu_freq_min}")	    print(f"default_cpu_freq_min: {default_cpu_freq_min}")

with open(os.path.join(cpu_policy_path, "scaling_max_freq"), 	with open(os.path.join(cpu_policy_path, "scaling_max_freq"), 
    default_cpu_freq_max = f.read().strip()			    default_cpu_freq_max = f.read().strip()
    print(f"default_cpu_freq_max: {default_cpu_freq_max}")	    print(f"default_cpu_freq_max: {default_cpu_freq_max}")

backlight_bl_path = os.path.join(backlight_path, "bl_power")	backlight_bl_path = os.path.join(backlight_path, "bl_power")
with open(backlight_bl_path, "r") as f:				with open(backlight_bl_path, "r") as f:
    screen_state = f.read().strip()				    screen_state = f.read().strip()

#drm_enabled_path = os.path.join(drm_panel_path, "enabled")	#drm_enabled_path = os.path.join(drm_panel_path, "enabled")
#with open(drm_enabled_path, "r") as f:				#with open(drm_enabled_path, "r") as f:
#    screen_state = f.read().strip()				#    screen_state = f.read().strip()

try:								try:
    control_by_state(screen_state != "4")			    control_by_state(screen_state != "4")
#    control_by_state(screen_state != "disabled")		#    control_by_state(screen_state != "disabled")
except Exception as e:						except Exception as e:
    print(f"Error occurred: {e}, on init. ignored")		    print(f"Error occurred: {e}, on init. ignored")

inotify = INotify()						inotify = INotify()
watch_flags = flags.MODIFY					watch_flags = flags.MODIFY
inotify.add_watch(backlight_bl_path, watch_flags)		inotify.add_watch(backlight_bl_path, watch_flags)

print(f"Monitoring {backlight_bl_path} for changes...")		print(f"Monitoring {backlight_bl_path} for changes...")

last_screen_state = ""						last_screen_state = ""
while True:							while True:
    try:							    try:
        events = inotify.read(1000)				        events = inotify.read(1000)

        event_occured = False					        event_occured = False
        for event in events:					        for event in events:
            event_occured = True				            event_occured = True

        with open(backlight_bl_path, "r") as f:			        with open(backlight_bl_path, "r") as f:
            screen_state = f.read().strip()			            screen_state = f.read().strip()
        event_occured = screen_state != last_screen_state	        event_occured = screen_state != last_screen_state
        last_screen_state = screen_state			        last_screen_state = screen_state

        if not event_occured:					        if not event_occured:
            continue						            continue

        control_by_state(screen_state != "4")			        control_by_state(screen_state != "4")

    except Exception as e:					    except Exception as e:
        print(f"Error occurred: {e}")				        print(f"Error occurred: {e}")

EOF								EOF

cat << 'EOF' > uconsole-sleep/etc/uconsole-sleep/config.defau	cat << 'EOF' > uconsole-sleep/etc/uconsole-sleep/config.defau
#############################################################	#############################################################
#                    uConsole-Sleep configuration file       	#                    uConsole-Sleep configuration file       
#############################################################	#############################################################

### HOLD_TRIGGER_SEC --- [0.0~] --- Time(sec) to trigger powe	### HOLD_TRIGGER_SEC --- [0.0~] --- Time(sec) to trigger powe
# default 0.7							# default 0.7
#HOLD_TRIGGER_SEC=1.3						#HOLD_TRIGGER_SEC=1.3

### SAVING_CPU_FREQ --- [100,100~] <min,max> --- Freq(MHz) fo	### SAVING_CPU_FREQ --- [100,100~] <min,max> --- Freq(MHz) fo
# default 100,100 (depends on cpuinfo)				# default 100,100 (depends on cpuinfo)
#SAVING_CPU_FREQ=300,600					#SAVING_CPU_FREQ=300,600

### DISABLE_POWER_OFF_DRM --- [yes/no] --- Disable turn off D	### DISABLE_POWER_OFF_DRM --- [yes/no] --- Disable turn off D
###  - If you have some issue with recover screen, you can se	###  - If you have some issue with recover screen, you can se
# default no							# default no
#DISABLE_POWER_OFF_DRM=yes					#DISABLE_POWER_OFF_DRM=yes

### DISABLE_POWER_OFF_KB --- [yes/no] --- Disable turn off Ke	### DISABLE_POWER_OFF_KB --- [yes/no] --- Disable turn off Ke
###  - If you set this to "yes", the keyboard can turn on/off	###  - If you set this to "yes", the keyboard can turn on/off
# default no							# default no
#DISABLE_POWER_OFF_KB=yes					#DISABLE_POWER_OFF_KB=yes

### DISABLE_CPU_MIN_FREQ --- [yes/no] --- Disable set cpu fre	### DISABLE_CPU_MIN_FREQ --- [yes/no] --- Disable set cpu fre
# default no							# default no
#DISABLE_CPU_MIN_FREQ=yes					#DISABLE_CPU_MIN_FREQ=yes
EOF								EOF

cat << 'EOF' > uconsole-sleep/etc/systemd/system/sleep-power-	cat << 'EOF' > uconsole-sleep/etc/systemd/system/sleep-power-
[Unit]								[Unit]
Description=Sleep Power Control Based on Display and Sleep St	Description=Sleep Power Control Based on Display and Sleep St
After=basic.target						After=basic.target

[Service]							[Service]
EnvironmentFile=/etc/uconsole-sleep/config			EnvironmentFile=/etc/uconsole-sleep/config
ExecStart=/usr/local/bin/sleep_power_control			ExecStart=/usr/local/bin/sleep_power_control
Restart=always							Restart=always
User=root							User=root
Group=root							Group=root
StandardOutput=journal						StandardOutput=journal
StandardError=journal						StandardError=journal

[Install]							[Install]
WantedBy=basic.target						WantedBy=basic.target
EOF								EOF

cat << 'EOF' > uconsole-sleep/etc/systemd/system/sleep-remap-	cat << 'EOF' > uconsole-sleep/etc/systemd/system/sleep-remap-
[Unit]								[Unit]
Description=Sleep Remap PowerKey				Description=Sleep Remap PowerKey
After=basic.target						After=basic.target

[Service]							[Service]
EnvironmentFile=/etc/uconsole-sleep/config			EnvironmentFile=/etc/uconsole-sleep/config
ExecStartPre=/sbin/modprobe uinput				ExecStartPre=/sbin/modprobe uinput
ExecStart=/usr/local/bin/sleep_remap_powerkey			ExecStart=/usr/local/bin/sleep_remap_powerkey
Restart=always							Restart=always
User=root							User=root
Group=root							Group=root
StandardOutput=journal						StandardOutput=journal
StandardError=journal						StandardError=journal

[Install]							[Install]
WantedBy=basic.target						WantedBy=basic.target
EOF								EOF

cat << 'EOF' > uconsole-sleep/DEBIAN/control			cat << 'EOF' > uconsole-sleep/DEBIAN/control
Package: uconsole-sleep						Package: uconsole-sleep
Version: ENV_VERSION					      |	Version: 12
Maintainer: paragonnov (github.com/qkdxorjs1002)		Maintainer: paragonnov (github.com/qkdxorjs1002)
Original-Maintainer: paragonnov (github.com/qkdxorjs1002)	Original-Maintainer: paragonnov (github.com/qkdxorjs1002)
Architecture: all						Architecture: all
Description: uConsole Sleep control scripts.			Description: uConsole Sleep control scripts.
 Source-Path: /usr/local/src/uconsole-sleep			 Source-Path: /usr/local/src/uconsole-sleep
 Source-Site: https://github.com/qkdxorjs1002/uConsole-sleep	 Source-Site: https://github.com/qkdxorjs1002/uConsole-sleep
EOF								EOF

sed -i "s|ENV_VERSION|$ENV_VERSION|g" uconsole-sleep/DEBIAN/c |	# sed -i "s|ENV_VERSION|$ENV_VERSION|g" uconsole-sleep/DEBIAN

cat << 'EOF' > uconsole-sleep/DEBIAN/postinst			cat << 'EOF' > uconsole-sleep/DEBIAN/postinst
#!/bin/bash							#!/bin/bash

cp -n /etc/uconsole-sleep/config.default /etc/uconsole-sleep/	cp -n /etc/uconsole-sleep/config.default /etc/uconsole-sleep/

systemctl daemon-reload						systemctl daemon-reload

systemctl enable sleep-power-control.service			systemctl enable sleep-power-control.service
systemctl enable sleep-remap-powerkey.service			systemctl enable sleep-remap-powerkey.service

systemctl start sleep-power-control.service			systemctl start sleep-power-control.service
systemctl start sleep-remap-powerkey.service			systemctl start sleep-remap-powerkey.service
EOF								EOF

cat << 'EOF' > uconsole-sleep/DEBIAN/prerm			cat << 'EOF' > uconsole-sleep/DEBIAN/prerm
#!/bin/bash							#!/bin/bash

systemctl stop sleep-power-control.service			systemctl stop sleep-power-control.service
systemctl stop sleep-remap-powerkey.service			systemctl stop sleep-remap-powerkey.service

systemctl disable sleep-power-control.service			systemctl disable sleep-power-control.service
systemctl disable sleep-remap-powerkey.service			systemctl disable sleep-remap-powerkey.service
EOF								EOF

cat << 'EOF' > uconsole-sleep/DEBIAN/postrm			cat << 'EOF' > uconsole-sleep/DEBIAN/postrm
#!/bin/bash							#!/bin/bash

systemctl daemon-reload						systemctl daemon-reload
EOF								EOF


cd uconsole-sleep						cd uconsole-sleep
python3 -m venv .venv						python3 -m venv .venv
source .venv/bin/activate					source .venv/bin/activate
python3 -m pip install --no-cache-dir pyinstaller		python3 -m pip install --no-cache-dir pyinstaller
python3 -m pip install --no-cache-dir "inotify-simple>=1.3.0"	python3 -m pip install --no-cache-dir "inotify-simple>=1.3.0"
python3 -m pip install --no-cache-dir "python-uinput>=1.0.0"	python3 -m pip install --no-cache-dir "python-uinput>=1.0.0"

#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons	#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons
#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons	#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons
#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons	#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons
#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons	#pyinstaller -F --distpath usr/local/bin/ usr/local/src/ucons
#pyinstaller -F --hidden-import=_libsuinput --distpath usr/lo	#pyinstaller -F --hidden-import=_libsuinput --distpath usr/lo
pyinstaller -F --distpath usr/local/bin/ usr/local/src/uconso	pyinstaller -F --distpath usr/local/bin/ usr/local/src/uconso
pyinstaller -F --hidden-import=_libsuinput --distpath usr/loc	pyinstaller -F --hidden-import=_libsuinput --distpath usr/loc

chmod +x etc/uconsole-sleep/*					chmod +x etc/uconsole-sleep/*
chmod +x usr/local/bin/*					chmod +x usr/local/bin/*
chmod +x DEBIAN/*						chmod +x DEBIAN/*

rm -rf usr/local/src/uconsole-sleep/*.py			rm -rf usr/local/src/uconsole-sleep/*.py
rm -rf ./*.spec							rm -rf ./*.spec
rm -rf ./build							rm -rf ./build
rm -rf ./.venv							rm -rf ./.venv
cd ..								cd ..

dpkg-deb --build uconsole-sleep					dpkg-deb --build uconsole-sleep


rm -rf uconsole-sleep						rm -rf uconsole-sleep
